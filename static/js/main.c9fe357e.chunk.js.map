{"version":3,"sources":["serviceWorker.js","App.js","lookpups/components.js","tweets/buttons.js","tweets/lookup.js","tweets/tweet.js","tweets/detail.js","tweets/post.js","tweets/list.js","index.js","tweets/components.js"],"names":["Boolean","window","location","hostname","match","App","className","AJAXLookup","method","endpoint","call","data","jsondata","JSON","stringify","url","req","XMLHttpRequest","open","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","send","onload","this","response","status","ActioBtn","props","tweet","perform","action","actionHandler","id","type","handleAction","likes","onClick","display","ParentTweet","parent","href","user","content","Tweet","UpdateRequired","canTweet","useState","setTweet","parent_tweet","didaction","DetailTweet","tweetId","detailTweet","setDetailTweet","useEffect","PostTweet","setNewTweets","textAreaRef","React","createRef","postErrorRef","ref","onSubmit","event","preventDefault","newTweet","post","current","value","textContent","console","log","alert","required","placeholder","UpdaterCaller","setTweets","tweets","username","tweetCount","endPoint","handleUpdate","newUpdate","TweetsList","newTweets","map","item","index","key","e","createElement","Main_App","getElementById","ReactDOM","render","Main_Tweets","dataset","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9fe357e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","// UTILS\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    const cookies = document.cookie.split(\";\");\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nfunction AJAXLookup(method, endpoint, call, data) {\n  let jsondata;\n  if (data) {\n    jsondata = JSON.stringify(data);\n  }\n  const url = `http://127.0.0.1:8000${endpoint}`;\n  var req = new XMLHttpRequest();\n  req.open(method, url);\n  req.responseType = \"json\";\n  if (method === \"POST\") {\n    const csrftoken = getCookie(\"csrftoken\");\n    req.setRequestHeader(\"content-type\", \"application/json\");\n    req.setRequestHeader(\"x-csrftoken\", csrftoken);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    req.send(jsondata);\n  } else {\n    req.send();\n  }\n  req.onload = function () {\n    call(this.response, this.status);\n  };\n}\n\nexport { AJAXLookup };\n","import React from 'react'\nimport { handleAction } from './lookup'\n\nfunction ActioBtn(props) {\n    const { tweet, perform, action } = props;\n    const actionHandler = (id, type) => {\n        const data = {\n            id: id,\n            action: type,\n        };\n        handleAction(data, (response, status) => {\n            if (status === 200) {\n                perform(response);\n            }\n            if (status === 201) {\n                perform(true)\n            }\n        });\n    };\n    if (action.type === \"count\") {\n        return <button className=\"action-btn\">{tweet.likes}</button>;\n    }\n    const button = (\n        <button\n            className=\"action-btn\"\n            onClick={() => actionHandler(tweet.id, action.type)}\n        >\n            {action.display}\n        </button>\n    );\n    return button;\n}\n\nexport { ActioBtn }","import {AJAXLookup} from '../lookpups'\n\nfunction handlePostForm(newTweet, call) {\n    AJAXLookup(\"POST\", \"/api/tweets/list/\", call, { content: newTweet });\n}\n\nfunction handleAction(data, call) {\n    AJAXLookup(\"POST\", \"/api/tweets/action/\", call, data);\n}\n\nfunction handleDetail(id,call){\n    AJAXLookup(\"GET\",`/api/tweets/${id}/`,call)\n}\n\nfunction handleUpdate(username,tweetCount,call){\n    let endPoint = `/api/tweets/list/`\n    if(username){\n        endPoint += `?username=${username}`\n        if(tweetCount){\n            endPoint += `&tweetCount=${tweetCount}`\n        }\n    }\n    // dev-start\n    else if(tweetCount){\n        endPoint += `?tweetCount=${tweetCount}`\n    }\n    // dev-end\n    AJAXLookup(\"GET\",endPoint,call)\n}\n\nexport {handleAction,handlePostForm,handleDetail,handleUpdate}","import React, { useState } from \"react\";\nimport { ActioBtn } from \"./buttons\";\n\nconst ParentTweet = (props) => {\n  const { parent } = props;\n  return (\n    <div className=\"retweet row col-11 mx-auto mb-2\">\n      <a className=\"link\" href=\"www.google.com\">\n        {parent.user}\n      </a>\n      <div className=\"col-12 px-2\">\n        <div className=\"p-2\">\n          <span className=\"content\">{parent.content}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Tweet = (props) => {\n  const { UpdateRequired, canTweet } = props;\n  const [tweet, setTweet] = useState(props.tweet);\n  const parent = tweet.parent_tweet;\n  const tweetClassName = \"tweet\";\n  function didaction(tweet) {\n    setTweet(tweet);\n  }\n  return (\n    <>\n      <div className={tweetClassName}>\n        <div className=\"Profile\">\n          <a className=\"link\" href=\"www.google.com\">\n            {tweet.user}\n          </a>\n        </div>\n        <div className=\"tweet-content p-2\">\n          <span className=\"content\">{tweet.content}</span>\n          {parent && <ParentTweet parent={parent} />}\n        </div>\n        <div className=\"btn-group justify-content-between col-12\">\n          <ActioBtn\n            tweet={tweet}\n            perform={didaction}\n            action={{ type: \"count\" }}\n          />\n          <ActioBtn\n            tweet={tweet}\n            perform={didaction}\n            action={{ type: \"upvote\", display: \"Like!\" }}\n          />\n          <ActioBtn\n            tweet={tweet}\n            perform={didaction}\n            action={{ type: \"downvote\", display: \"Dislike\" }}\n          />\n          {canTweet && <ActioBtn\n            tweet={tweet}\n            perform={UpdateRequired}\n            action={{ type: \"retweet\", display: \"Retweet\" }}\n          />}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport { Tweet, ParentTweet };\n","import React,{useState,useEffect} from \"react\";\nimport { Tweet } from \"./tweet\";\nimport { handleDetail } from \"./lookup\";\n\nconst DetailTweet=(props)=>{\n  const {tweetId,canTweet}=props\n  const [detailTweet,setDetailTweet] = useState(<h1 className='mx-auto'>loading...</h1>)\n  useEffect(() => {\n    handleDetail(tweetId, (response, status) => {\n      if (status === 200) {\n        const loadedDetailTweet = <Tweet tweet={response} canTweet={canTweet}/>\n        setDetailTweet(loadedDetailTweet)\n      }\n      else{\n        const errorLoadedDetailTweet = <h1 className='alert alert-danger mx-auto'>Sorry we couldn't find that Tweet</h1>\n        setDetailTweet(errorLoadedDetailTweet)\n      }\n    });\n  }, [tweetId,canTweet])\n  return detailTweet\n}\n\nexport { DetailTweet };\n","import React from \"react\";\nimport {handlePostForm } from \"./lookup\";\n\nconst PostTweet = (props) => {\n  const {setNewTweets} = props\n  const textAreaRef = React.createRef();\n  const postErrorRef = React.createRef();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const post = textAreaRef.current;\n    handlePostForm(post.value, (response, status) => {\n      if (status === 201) {\n        postErrorRef.current.className = \"d-display alert alert-success\";\n        postErrorRef.current.textContent = \"Tweet Posted!\";\n        console.log(\"enters 201\")\n        setNewTweets(true)\n      } else if (status === 400) {\n        postErrorRef.current.className = \"d-display alert alert-danger\";\n        postErrorRef.current.textContent = response.content[0];\n      } else {\n        alert(\"There was an error-Try Again\");\n      }\n    });\n    post.value = \"\";\n  };\n  return (\n    <>\n      <div className=\"col-12 mx-auto col-12\" id=\"postForm\">\n        <div id=\"postTweetError\" className=\"d-block\" ref={postErrorRef}></div>\n        <form onSubmit={handleSubmit} id=\"postTweet\">\n          <textarea\n            type=\"text\"\n            required={true}\n            className=\"col-12\"\n            id=\"postContent\"\n            name=\"content\"\n            placeholder=\"Share Your Tweet!!\"\n            ref={textAreaRef}\n          />\n          <div>\n            <button type=\"submit\" className=\"btn-lg btn-success my-4\">\n              POST\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport { PostTweet };\n","import React, { useState, useEffect } from \"react\";\nimport { handleUpdate } from \"./lookup\";\nimport { Tweet } from \"./tweet\";\n\nfunction UpdaterCaller(setTweets, tweets, setNewTweets, username) {\n  const TweetCount = tweets.length;\n  username = username ? username : null;\n  const Updater = (response, status) => {\n    if (status === 200) {\n      const newUpdate = [...response, ...tweets];\n      setTweets(newUpdate);\n      setNewTweets(false);\n    } else {\n      alert(`Something went wrong STATUS:\\n[Server ERROR:${status}]`);\n    }\n  };\n  handleUpdate(username, TweetCount, Updater);\n}\n\nconst TweetsList = (props) => {\n  const { username, newTweets, setNewTweets,canTweet } = props;\n  const [tweets, setTweets] = useState([]);\n\n  useEffect(() => {\n    if (newTweets === true) {\n      console.log(\"newTweets\", newTweets);\n      UpdaterCaller(setTweets, tweets, setNewTweets, username);\n    }\n    //eslint-disable-next-line\n  }, [newTweets, username, setNewTweets]);\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        key={`${index}-${item.id}`}\n        UpdateRequired={setNewTweets}\n        canTweet={canTweet}\n      />\n    );\n  });\n};\n\nexport { TweetsList };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport {TweetComponents} from './tweets'\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst e = React.createElement\n\nconst Main_App = document.getElementById('Main_App')\nif(Main_App){\nReactDOM.render(\n  <App />,Main_App\n);\n}\n\nconst Main_Tweets = document.getElementById('Main_Tweets')\nif(Main_Tweets){\n  ReactDOM.render(\n    <div className=\"mx-auto\">{e(TweetComponents,Main_Tweets.dataset)}</div>,Main_Tweets)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport \"./components.css\";\nimport { DetailTweet } from \"./detail\";\nimport { PostTweet } from \"./post\";\nimport { TweetsList } from \"./list\";\n\nconst TweetComponents = (props) => {\n  console.log(props)\n  const canTweet = props.canTweet === \"True\" ? true : false;\n  const tweetId = props.tweetId ? props.tweetId : -1;\n  const [newTweets, setNewTweets] = useState(true);\n  return (\n    <>\n      {canTweet && <PostTweet {...props} setNewTweets={setNewTweets} />}\n      <div id=\"tweets-container\">\n        <TweetsList\n          newTweets={newTweets}\n          setNewTweets={setNewTweets}\n          canTweet={canTweet}\n          {...props}\n        />\n        </div>\n        <div id=\"detail-tweet-container\" className=\"d-none\">\n          <DetailTweet\n            tweetId={tweetId}\n            canTweet={canTweet}\n            UpdateRequired={newTweets}\n          />\n        </div>\n    </>\n  );\n};\n\nexport {TweetComponents}"],"sourceRoot":""}